import{_ as t,M as o,p as i,q as c,R as n,t as s,N as a,a1 as p}from"./framework-204010b2.js";const l={},d=n("h1",{id:"vuepress-plugin-vue-docgen",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vuepress-plugin-vue-docgen","aria-hidden":"true"},"#"),s(" vuepress-plugin-vue-docgen")],-1),r=n("h2",{id:"introduction",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),s(" Introduction")],-1),u=n("code",null,"vuepress-plugin-vue-docgen",-1),k=n("code",null,"vue",-1),m={href:"https://vue-styleguidist.github.io/docs/Documenting.html",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"vuepress 2",-1),g=n("code",null,"vue-docgen-cli",-1),h=n("code",null,"vue-docgen",-1),f=n("code",null,"frontmatter",-1),b=p(`<h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">add</span> <span class="token parameter variable">--save</span> vuepress-plugin-vue-docgen
<span class="token comment"># pnpm add vuepress-plugin-vue-docgen</span>
<span class="token comment"># yarn add vuepress-plugin-vue-docgen</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typical-usage" tabindex="-1"><a class="header-anchor" href="#typical-usage" aria-hidden="true">#</a> Typical usage</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// .vuepress/config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineUserConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuepress&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> VueDocgenPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuepress-plugin-vue-docgen&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">VueDocgenPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Without options, the plugin will look for <code>.vue</code> files using <code>glob</code> template <code>[&#39;**/components/**/*.vue&#39;, &#39;!**/node_modules/**&#39;, &#39;!**/.vuepress/**&#39;]</code></p><h2 id="config" tabindex="-1"><a class="header-anchor" href="#config" aria-hidden="true">#</a> Config</h2><h3 id="docgencliconfig" tabindex="-1"><a class="header-anchor" href="#docgencliconfig" aria-hidden="true">#</a> docgenCliConfig</h3><ul><li>type: <code>Partial&lt;Omit&lt;DocgenCLIConfig, &#39;outDir&#39; | &#39;components&#39;&gt;&gt;</code></li><li>required: <code>false</code></li></ul><p>Config for <code>vue-docgen-cli</code>.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>If you need change <code>docgenCliConfig.templates.component</code> and save functionality of <code>frontmatter</code>, you need use <a href="#advanced-usage"><code>extractAndCutFrontmatter</code></a>.</p></div><h3 id="docgencliconfigpath" tabindex="-1"><a class="header-anchor" href="#docgencliconfigpath" aria-hidden="true">#</a> docgenCliConfigPath</h3><ul><li>type: <code>string</code></li><li>required: <code>false</code></li></ul><p>File path to <code>docgenCliConfig</code>. Work only for <code>commonjs</code> syntax of config file.</p><h3 id="groups" tabindex="-1"><a class="header-anchor" href="#groups" aria-hidden="true">#</a> groups</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">VueDocgenPluginGroup</span> <span class="token punctuation">{</span>
  <span class="token comment">// Root of component (this part of file path would cutted)</span>
  root<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token comment">// Glob string for find components</span>
  components<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// Out path of docs in vuepress app for this group</span>
  outDir<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token comment">// Custom docgenCliConfig for current group</span>
  docgenCliConfig<span class="token operator">?</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>Omit<span class="token operator">&lt;</span>DocgenCLIConfig<span class="token punctuation">,</span> <span class="token string">&#39;outDir&#39;</span> <span class="token operator">|</span> UsedInVueDocgenConfigProcessingProperties<span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>type: <code>string | string[] | VueDocgenPluginGroup[]</code></li><li>required: <code>false</code></li><li>default: <code>[{ components: [&#39;**/components/**/*.vue&#39;, &#39;!**/node_modules/**&#39;, &#39;!**/.vuepress/**&#39;] }]</code></li></ul><p>List of component entries with customization of <code>root</code> and <code>outDir</code>. <code>string</code> type will converted to object like this <code>groups: &#39;*.vue&#39;</code> -&gt; <code>groups: [{ components: &#39;*.vue&#39; }]</code>.</p><h3 id="stateless" tabindex="-1"><a class="header-anchor" href="#stateless" aria-hidden="true">#</a> stateless</h3><ul><li>type: <code>boolean</code></li><li>default: <code>true</code></li></ul><p>Mode for generation files in tmp folder.</p><h2 id="advanced-usage" tabindex="-1"><a class="header-anchor" href="#advanced-usage" aria-hidden="true">#</a> Advanced usage</h2><p>If you need to change <code>docgenCliConfig.templates.component</code> and still keep functionality of <code>frontmatter</code>, you need use <code>extractAndCutFrontmatter</code>. Without it <code>frontmatter</code> of nested doc files will be treated as a common <code>markdown</code>.</p><h3 id="extractandcutfrontmatter" tabindex="-1"><a class="header-anchor" href="#extractandcutfrontmatter" aria-hidden="true">#</a> extractAndCutFrontmatter</h3><p>Function created for strip <code>frontmatter</code> information from all nested <code>.md</code> files and inject and merge it to base <code>.md</code> content(<code>content</code>). By default, everything is inject and merge in a result of the original <code>docgenCliConfig.tepmlates.component</code>.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> extractAndCutFrontmatter <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token comment">// doc.docsBlocks will modified by calling this function</span>
  doc<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>Pick<span class="token operator">&lt;</span>ComponentDoc<span class="token punctuation">,</span> <span class="token string">&#39;docsBlocks&#39;</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
  grayMatterOptions<span class="token operator">:</span> GrayMatterOption<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token comment">// Base markdown content (for example result of original templates.component)</span>
  content <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">// Content with injected all frontmatter</span>
  content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token comment">// Separated frontmatter</span>
  frontmatter<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><p>Delete info-block contained <code>slots</code>.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// templates/component.ts</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Templates <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-docgen-cli&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> extractAndCutFrontmatter<span class="token punctuation">,</span> templateComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuepress-plugin-vue-docgen&#39;</span><span class="token punctuation">;</span>


<span class="token keyword">const</span> grayMatterOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> componentTemplate<span class="token operator">:</span> Templates<span class="token punctuation">[</span><span class="token string">&#39;component&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  renderedUsage<span class="token punctuation">,</span>
  doc<span class="token punctuation">,</span>
  config<span class="token punctuation">,</span>
  fileName<span class="token punctuation">,</span>
  requiresMd<span class="token punctuation">,</span>
  subTemplateOptions<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  renderedUsage<span class="token punctuation">.</span>slots <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">templateComponent</span><span class="token punctuation">(</span>grayMatterOptions<span class="token punctuation">)</span><span class="token punctuation">(</span>
    renderedUsage<span class="token punctuation">,</span>
    doc<span class="token punctuation">,</span>
    config<span class="token punctuation">,</span>
    fileName<span class="token punctuation">,</span>
    requiresMd<span class="token punctuation">,</span>
    subTemplateOptions<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="known-issues" tabindex="-1"><a class="header-anchor" href="#known-issues" aria-hidden="true">#</a> Known issues</h2><h3 id="vuepress-editlink" tabindex="-1"><a class="header-anchor" href="#vuepress-editlink" aria-hidden="true">#</a> Vuepress editLink</h3><p>&quot;Edit this page&quot; in <code>stateless: true</code> mode will not work correctly and lead to a non-existent file. Because it, <code>editLink</code> disabled in <code>stateless: true</code> mode by default.</p><p>Solutions:</p>`,32),y=n("li",null,[n("code",null,"stateless: false"),s(" and save all generated files in repo")],-1),_={href:"https://github.com/vue-styleguidist/vue-styleguidist/tree/dev/packages/vue-docgen-cli#getrepoediturl",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"docgenCliConfig.getRepoEditUrl",-1),C=n("code",null,"docsRepo",-1),w=n("code",null,"docsBranch",-1);function D(P,I){const e=o("ExternalLinkIcon");return i(),c("div",null,[d,r,n("p",null,[s("The "),u,s(" plugin is designed to auto-generate documentation of "),k,s(" components to "),n("a",m,[s("given syntax"),a(e)]),s(". The plugin links "),v,s(" and "),g,s(". All "),h,s(" documentation files continue to work with "),f,s(".")]),b,n("ul",null,[y,n("li",null,[s("Use "),n("a",_,[x,a(e)]),s(" and their sub-properties like "),C,s(", "),w,s(".")])])])}const B=t(l,[["render",D],["__file","index.html.vue"]]);export{B as default};
